// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: cloud/v1/cloud.proto

package cloudv2

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Profile:
	//
	//	*Profile_User
	//	*Profile_Organization
	Profile isProfile_Profile `protobuf_oneof:"profile"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	mi := &file_cloud_v1_cloud_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_cloud_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_cloud_v1_cloud_proto_rawDescGZIP(), []int{0}
}

func (m *Profile) GetProfile() isProfile_Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (x *Profile) GetUser() *User {
	if x, ok := x.GetProfile().(*Profile_User); ok {
		return x.User
	}
	return nil
}

func (x *Profile) GetOrganization() *Organization {
	if x, ok := x.GetProfile().(*Profile_Organization); ok {
		return x.Organization
	}
	return nil
}

type isProfile_Profile interface {
	isProfile_Profile()
}

type Profile_User struct {
	User *User `protobuf:"bytes,1,opt,name=user,proto3,oneof"`
}

type Profile_Organization struct {
	Organization *Organization `protobuf:"bytes,2,opt,name=organization,proto3,oneof"`
}

func (*Profile_User) isProfile_Profile() {}

func (*Profile_Organization) isProfile_Profile() {}

// Repository represents a GitHub repository with various attributes.
type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the repository.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique node identifier for the repository.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Owner of the repository.
	Owner *User `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// Name of the repository.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Full name of the repository including the owner's name.
	FullName string `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Brief description of the repository.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Homepage URL of the repository.
	Homepage string `protobuf:"bytes,7,opt,name=homepage,proto3" json:"homepage,omitempty"`
	// Default branch of the repository.
	DefaultBranch string `protobuf:"bytes,9,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	// Deprecated: Use default_branch instead.
	MasterBranch string `protobuf:"bytes,10,opt,name=master_branch,json=masterBranch,proto3" json:"master_branch,omitempty"`
	// Timestamps for various repository events.
	CreatedAt *Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PushedAt  *Timestamp `protobuf:"bytes,12,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
	UpdatedAt *Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// URLs for accessing the repository.
	HtmlUrl   string `protobuf:"bytes,14,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	CloneUrl  string `protobuf:"bytes,15,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	GitUrl    string `protobuf:"bytes,16,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	MirrorUrl string `protobuf:"bytes,17,opt,name=mirror_url,json=mirrorUrl,proto3" json:"mirror_url,omitempty"`
	SshUrl    string `protobuf:"bytes,18,opt,name=ssh_url,json=sshUrl,proto3" json:"ssh_url,omitempty"`
	SvnUrl    string `protobuf:"bytes,19,opt,name=svn_url,json=svnUrl,proto3" json:"svn_url,omitempty"`
	// Primary programming language of the repository.
	Language string `protobuf:"bytes,20,opt,name=language,proto3" json:"language,omitempty"`
	// Indicates if the repository is a fork.
	Fork bool `protobuf:"varint,21,opt,name=fork,proto3" json:"fork,omitempty"`
	// Counts of various repository metrics.
	ForksCount       int32 `protobuf:"varint,22,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	NetworkCount     int32 `protobuf:"varint,23,opt,name=network_count,json=networkCount,proto3" json:"network_count,omitempty"`
	OpenIssuesCount  int32 `protobuf:"varint,24,opt,name=open_issues_count,json=openIssuesCount,proto3" json:"open_issues_count,omitempty"`
	OpenIssues       int32 `protobuf:"varint,25,opt,name=open_issues,json=openIssues,proto3" json:"open_issues,omitempty"`
	StargazersCount  int32 `protobuf:"varint,26,opt,name=stargazers_count,json=stargazersCount,proto3" json:"stargazers_count,omitempty"`
	SubscribersCount int32 `protobuf:"varint,27,opt,name=subscribers_count,json=subscribersCount,proto3" json:"subscribers_count,omitempty"`
	WatchersCount    int32 `protobuf:"varint,28,opt,name=watchers_count,json=watchersCount,proto3" json:"watchers_count,omitempty"`
	Watchers         int32 `protobuf:"varint,29,opt,name=watchers,proto3" json:"watchers,omitempty"`
	Size             int32 `protobuf:"varint,30,opt,name=size,proto3" json:"size,omitempty"`
	// Repository initialization settings.
	AutoInit bool `protobuf:"varint,31,opt,name=auto_init,json=autoInit,proto3" json:"auto_init,omitempty"`
	// Parent, source, and template repositories.
	Parent             *Repository `protobuf:"bytes,32,opt,name=parent,proto3" json:"parent,omitempty"`
	Source             *Repository `protobuf:"bytes,33,opt,name=source,proto3" json:"source,omitempty"`
	TemplateRepository *Repository `protobuf:"bytes,34,opt,name=template_repository,json=templateRepository,proto3" json:"template_repository,omitempty"`
	// Organization associated with the repository.
	Organization *Organization `protobuf:"bytes,35,opt,name=organization,proto3" json:"organization,omitempty"`
	// Permissions for the repository.
	Permissions map[string]bool `protobuf:"bytes,36,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Merge options for the repository.
	AllowRebaseMerge    bool `protobuf:"varint,37,opt,name=allow_rebase_merge,json=allowRebaseMerge,proto3" json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge    bool `protobuf:"varint,38,opt,name=allow_squash_merge,json=allowSquashMerge,proto3" json:"allow_squash_merge,omitempty"`
	AllowMergeCommit    bool `protobuf:"varint,39,opt,name=allow_merge_commit,json=allowMergeCommit,proto3" json:"allow_merge_commit,omitempty"`
	AllowAutoMerge      bool `protobuf:"varint,40,opt,name=allow_auto_merge,json=allowAutoMerge,proto3" json:"allow_auto_merge,omitempty"`
	DeleteBranchOnMerge bool `protobuf:"varint,41,opt,name=delete_branch_on_merge,json=deleteBranchOnMerge,proto3" json:"delete_branch_on_merge,omitempty"`
	// Topics associated with the repository.
	Topics []string `protobuf:"bytes,42,rep,name=topics,proto3" json:"topics,omitempty"`
	// Repository status flags.
	Archived bool `protobuf:"varint,43,opt,name=archived,proto3" json:"archived,omitempty"`
	Disabled bool `protobuf:"varint,44,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Privacy settings for the repository.
	Private bool `protobuf:"varint,46,opt,name=private,proto3" json:"private,omitempty"`
	// Feature flags for the repository.
	HasIssues    bool `protobuf:"varint,47,opt,name=has_issues,json=hasIssues,proto3" json:"has_issues,omitempty"`
	HasWiki      bool `protobuf:"varint,48,opt,name=has_wiki,json=hasWiki,proto3" json:"has_wiki,omitempty"`
	HasPages     bool `protobuf:"varint,49,opt,name=has_pages,json=hasPages,proto3" json:"has_pages,omitempty"`
	HasProjects  bool `protobuf:"varint,50,opt,name=has_projects,json=hasProjects,proto3" json:"has_projects,omitempty"`
	HasDownloads bool `protobuf:"varint,51,opt,name=has_downloads,json=hasDownloads,proto3" json:"has_downloads,omitempty"`
	IsTemplate   bool `protobuf:"varint,52,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`
	// Templates for license and gitignore.
	LicenseTemplate   string `protobuf:"bytes,53,opt,name=license_template,json=licenseTemplate,proto3" json:"license_template,omitempty"`
	GitignoreTemplate string `protobuf:"bytes,54,opt,name=gitignore_template,json=gitignoreTemplate,proto3" json:"gitignore_template,omitempty"`
	// Team ID associated with the repository.
	TeamId int64 `protobuf:"varint,55,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// URLs for accessing the repository.
	Url        string `protobuf:"bytes,56,opt,name=url,proto3" json:"url,omitempty"`
	ArchiveUrl string `protobuf:"bytes,57,opt,name=archive_url,json=archiveUrl,proto3" json:"archive_url,omitempty"`
	// Visibility status of the repository.
	Visibility string `protobuf:"bytes,58,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	mi := &file_cloud_v1_cloud_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_cloud_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_cloud_v1_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *Repository) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Repository) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Repository) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Repository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repository) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *Repository) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *Repository) GetMasterBranch() string {
	if x != nil {
		return x.MasterBranch
	}
	return ""
}

func (x *Repository) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Repository) GetPushedAt() *Timestamp {
	if x != nil {
		return x.PushedAt
	}
	return nil
}

func (x *Repository) GetUpdatedAt() *Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Repository) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *Repository) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *Repository) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *Repository) GetMirrorUrl() string {
	if x != nil {
		return x.MirrorUrl
	}
	return ""
}

func (x *Repository) GetSshUrl() string {
	if x != nil {
		return x.SshUrl
	}
	return ""
}

func (x *Repository) GetSvnUrl() string {
	if x != nil {
		return x.SvnUrl
	}
	return ""
}

func (x *Repository) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Repository) GetFork() bool {
	if x != nil {
		return x.Fork
	}
	return false
}

func (x *Repository) GetForksCount() int32 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *Repository) GetNetworkCount() int32 {
	if x != nil {
		return x.NetworkCount
	}
	return 0
}

func (x *Repository) GetOpenIssuesCount() int32 {
	if x != nil {
		return x.OpenIssuesCount
	}
	return 0
}

func (x *Repository) GetOpenIssues() int32 {
	if x != nil {
		return x.OpenIssues
	}
	return 0
}

func (x *Repository) GetStargazersCount() int32 {
	if x != nil {
		return x.StargazersCount
	}
	return 0
}

func (x *Repository) GetSubscribersCount() int32 {
	if x != nil {
		return x.SubscribersCount
	}
	return 0
}

func (x *Repository) GetWatchersCount() int32 {
	if x != nil {
		return x.WatchersCount
	}
	return 0
}

func (x *Repository) GetWatchers() int32 {
	if x != nil {
		return x.Watchers
	}
	return 0
}

func (x *Repository) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Repository) GetAutoInit() bool {
	if x != nil {
		return x.AutoInit
	}
	return false
}

func (x *Repository) GetParent() *Repository {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Repository) GetSource() *Repository {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Repository) GetTemplateRepository() *Repository {
	if x != nil {
		return x.TemplateRepository
	}
	return nil
}

func (x *Repository) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Repository) GetPermissions() map[string]bool {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Repository) GetAllowRebaseMerge() bool {
	if x != nil {
		return x.AllowRebaseMerge
	}
	return false
}

func (x *Repository) GetAllowSquashMerge() bool {
	if x != nil {
		return x.AllowSquashMerge
	}
	return false
}

func (x *Repository) GetAllowMergeCommit() bool {
	if x != nil {
		return x.AllowMergeCommit
	}
	return false
}

func (x *Repository) GetAllowAutoMerge() bool {
	if x != nil {
		return x.AllowAutoMerge
	}
	return false
}

func (x *Repository) GetDeleteBranchOnMerge() bool {
	if x != nil {
		return x.DeleteBranchOnMerge
	}
	return false
}

func (x *Repository) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Repository) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Repository) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Repository) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Repository) GetHasIssues() bool {
	if x != nil {
		return x.HasIssues
	}
	return false
}

func (x *Repository) GetHasWiki() bool {
	if x != nil {
		return x.HasWiki
	}
	return false
}

func (x *Repository) GetHasPages() bool {
	if x != nil {
		return x.HasPages
	}
	return false
}

func (x *Repository) GetHasProjects() bool {
	if x != nil {
		return x.HasProjects
	}
	return false
}

func (x *Repository) GetHasDownloads() bool {
	if x != nil {
		return x.HasDownloads
	}
	return false
}

func (x *Repository) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *Repository) GetLicenseTemplate() string {
	if x != nil {
		return x.LicenseTemplate
	}
	return ""
}

func (x *Repository) GetGitignoreTemplate() string {
	if x != nil {
		return x.GitignoreTemplate
	}
	return ""
}

func (x *Repository) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Repository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Repository) GetArchiveUrl() string {
	if x != nil {
		return x.ArchiveUrl
	}
	return ""
}

func (x *Repository) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

// User represents a GitHub user with various attributes.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique login name of the user.
	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"` // Must not be empty
	// Unique identifier for the user.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // Must be greater than 0
	// Unique node identifier for the user.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // Must not be empty
	// URLs for the user's avatar and profile.
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"` // Must be a valid URL
	HtmlUrl   string `protobuf:"bytes,5,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`       // Must be a valid URL
	// Optional fields for user information.
	GravatarId      string `protobuf:"bytes,6,opt,name=gravatar_id,json=gravatarId,proto3" json:"gravatar_id,omitempty"`                 // No validation needed
	Name            string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                               // No validation needed
	Company         string `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`                                         // No validation needed
	Blog            string `protobuf:"bytes,9,opt,name=blog,proto3" json:"blog,omitempty"`                                               // Must be a valid URL
	Location        string `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`                                      // No validation needed
	Email           string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`                                            // Must be a valid email
	Hireable        bool   `protobuf:"varint,12,opt,name=hireable,proto3" json:"hireable,omitempty"`                                     // No validation needed
	Bio             string `protobuf:"bytes,13,opt,name=bio,proto3" json:"bio,omitempty"`                                                // Max length of 160 characters
	TwitterUsername string `protobuf:"bytes,14,opt,name=twitter_username,json=twitterUsername,proto3" json:"twitter_username,omitempty"` // No validation needed
	// Counts of the user's repositories and followers.
	PublicRepos int32 `protobuf:"varint,15,opt,name=public_repos,json=publicRepos,proto3" json:"public_repos,omitempty"` // Must be greater than or equal to 0
	PublicGists int32 `protobuf:"varint,16,opt,name=public_gists,json=publicGists,proto3" json:"public_gists,omitempty"` // Must be greater than or equal to 0
	Followers   int32 `protobuf:"varint,17,opt,name=followers,proto3" json:"followers,omitempty"`                        // Must be greater than or equal to 0
	Following   int32 `protobuf:"varint,18,opt,name=following,proto3" json:"following,omitempty"`                        // Must be greater than or equal to 0
	// Timestamps for user events.
	CreatedAt   *Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`       // No validation needed
	UpdatedAt   *Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`       // No validation needed
	SuspendedAt *Timestamp `protobuf:"bytes,21,opt,name=suspended_at,json=suspendedAt,proto3" json:"suspended_at,omitempty"` // No validation needed
	Type        string     `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`                                  // No validation needed
	SiteAdmin   bool       `protobuf:"varint,23,opt,name=site_admin,json=siteAdmin,proto3" json:"site_admin,omitempty"`      // No validation needed
	// Counts of private repositories and gists.
	TotalPrivateRepos       int32 `protobuf:"varint,24,opt,name=total_private_repos,json=totalPrivateRepos,proto3" json:"total_private_repos,omitempty"`                   // Must be greater than or equal to 0
	OwnedPrivateRepos       int32 `protobuf:"varint,25,opt,name=owned_private_repos,json=ownedPrivateRepos,proto3" json:"owned_private_repos,omitempty"`                   // Must be greater than or equal to 0
	PrivateGists            int32 `protobuf:"varint,26,opt,name=private_gists,json=privateGists,proto3" json:"private_gists,omitempty"`                                    // Must be greater than or equal to 0
	DiskUsage               int32 `protobuf:"varint,27,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`                                             // Must be greater than or equal to 0
	Collaborators           int32 `protobuf:"varint,28,opt,name=collaborators,proto3" json:"collaborators,omitempty"`                                                      // Must be greater than or equal to 0
	TwoFactorAuthentication bool  `protobuf:"varint,29,opt,name=two_factor_authentication,json=twoFactorAuthentication,proto3" json:"two_factor_authentication,omitempty"` // No validation needed
	// API URLs
	Url               string `protobuf:"bytes,32,opt,name=url,proto3" json:"url,omitempty"`                                                        // Must be a valid URL
	EventsUrl         string `protobuf:"bytes,33,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`                           // Must be a valid URL
	FollowingUrl      string `protobuf:"bytes,34,opt,name=following_url,json=followingUrl,proto3" json:"following_url,omitempty"`                  // Must be a valid URL
	FollowersUrl      string `protobuf:"bytes,35,opt,name=followers_url,json=followersUrl,proto3" json:"followers_url,omitempty"`                  // Must be a valid URL
	GistsUrl          string `protobuf:"bytes,36,opt,name=gists_url,json=gistsUrl,proto3" json:"gists_url,omitempty"`                              // Must be a valid URL
	OrganizationsUrl  string `protobuf:"bytes,37,opt,name=organizations_url,json=organizationsUrl,proto3" json:"organizations_url,omitempty"`      // Must be a valid URL
	ReceivedEventsUrl string `protobuf:"bytes,38,opt,name=received_events_url,json=receivedEventsUrl,proto3" json:"received_events_url,omitempty"` // Must be a valid URL
	ReposUrl          string `protobuf:"bytes,39,opt,name=repos_url,json=reposUrl,proto3" json:"repos_url,omitempty"`                              // Must be a valid URL
	StarredUrl        string `protobuf:"bytes,40,opt,name=starred_url,json=starredUrl,proto3" json:"starred_url,omitempty"`                        // Must be a valid URL
	SubscriptionsUrl  string `protobuf:"bytes,41,opt,name=subscriptions_url,json=subscriptionsUrl,proto3" json:"subscriptions_url,omitempty"`      // Must be a valid URL
	// Permissions identifies the permissions that a user has on a given
	// repository. This is only populated when calling Repositories.ListCollaborators.
	Permissions map[string]bool `protobuf:"bytes,43,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // No validation needed
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_cloud_v1_cloud_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_cloud_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cloud_v1_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *User) GetGravatarId() string {
	if x != nil {
		return x.GravatarId
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *User) GetBlog() string {
	if x != nil {
		return x.Blog
	}
	return ""
}

func (x *User) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetHireable() bool {
	if x != nil {
		return x.Hireable
	}
	return false
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetTwitterUsername() string {
	if x != nil {
		return x.TwitterUsername
	}
	return ""
}

func (x *User) GetPublicRepos() int32 {
	if x != nil {
		return x.PublicRepos
	}
	return 0
}

func (x *User) GetPublicGists() int32 {
	if x != nil {
		return x.PublicGists
	}
	return 0
}

func (x *User) GetFollowers() int32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *User) GetFollowing() int32 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *User) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetSuspendedAt() *Timestamp {
	if x != nil {
		return x.SuspendedAt
	}
	return nil
}

func (x *User) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *User) GetSiteAdmin() bool {
	if x != nil {
		return x.SiteAdmin
	}
	return false
}

func (x *User) GetTotalPrivateRepos() int32 {
	if x != nil {
		return x.TotalPrivateRepos
	}
	return 0
}

func (x *User) GetOwnedPrivateRepos() int32 {
	if x != nil {
		return x.OwnedPrivateRepos
	}
	return 0
}

func (x *User) GetPrivateGists() int32 {
	if x != nil {
		return x.PrivateGists
	}
	return 0
}

func (x *User) GetDiskUsage() int32 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

func (x *User) GetCollaborators() int32 {
	if x != nil {
		return x.Collaborators
	}
	return 0
}

func (x *User) GetTwoFactorAuthentication() bool {
	if x != nil {
		return x.TwoFactorAuthentication
	}
	return false
}

func (x *User) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *User) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *User) GetFollowingUrl() string {
	if x != nil {
		return x.FollowingUrl
	}
	return ""
}

func (x *User) GetFollowersUrl() string {
	if x != nil {
		return x.FollowersUrl
	}
	return ""
}

func (x *User) GetGistsUrl() string {
	if x != nil {
		return x.GistsUrl
	}
	return ""
}

func (x *User) GetOrganizationsUrl() string {
	if x != nil {
		return x.OrganizationsUrl
	}
	return ""
}

func (x *User) GetReceivedEventsUrl() string {
	if x != nil {
		return x.ReceivedEventsUrl
	}
	return ""
}

func (x *User) GetReposUrl() string {
	if x != nil {
		return x.ReposUrl
	}
	return ""
}

func (x *User) GetStarredUrl() string {
	if x != nil {
		return x.StarredUrl
	}
	return ""
}

func (x *User) GetSubscriptionsUrl() string {
	if x != nil {
		return x.SubscriptionsUrl
	}
	return ""
}

func (x *User) GetPermissions() map[string]bool {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Organization represents a GitHub organization.
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login                       string     `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`                                                                                      // Must not be empty
	Id                          int64      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                                                                           // Must be greater than 0
	NodeId                      string     `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                                                      // Must not be empty
	AvatarUrl                   string     `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                                             // Must be a valid URL
	HtmlUrl                     string     `protobuf:"bytes,5,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`                                                                   // Must be a valid URL
	Name                        string     `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                        // No validation needed
	Company                     string     `protobuf:"bytes,7,opt,name=company,proto3" json:"company,omitempty"`                                                                                  // No validation needed
	Blog                        string     `protobuf:"bytes,8,opt,name=blog,proto3" json:"blog,omitempty"`                                                                                        // Must be a valid URL
	Location                    string     `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`                                                                                // No validation needed
	Email                       string     `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`                                                                                     // Must be a valid email
	TwitterUsername             string     `protobuf:"bytes,11,opt,name=twitter_username,json=twitterUsername,proto3" json:"twitter_username,omitempty"`                                          // No validation needed
	Description                 string     `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`                                                                         // No validation needed
	PublicRepos                 int32      `protobuf:"varint,13,opt,name=public_repos,json=publicRepos,proto3" json:"public_repos,omitempty"`                                                     // Must be greater than or equal to 0
	PublicGists                 int32      `protobuf:"varint,14,opt,name=public_gists,json=publicGists,proto3" json:"public_gists,omitempty"`                                                     // Must be greater than or equal to 0
	Followers                   int32      `protobuf:"varint,15,opt,name=followers,proto3" json:"followers,omitempty"`                                                                            // Must be greater than or equal to 0
	Following                   int32      `protobuf:"varint,16,opt,name=following,proto3" json:"following,omitempty"`                                                                            // Must be greater than or equal to 0
	CreatedAt                   *Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                            // No validation needed
	UpdatedAt                   *Timestamp `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                            // No validation needed
	TotalPrivateRepos           int32      `protobuf:"varint,19,opt,name=total_private_repos,json=totalPrivateRepos,proto3" json:"total_private_repos,omitempty"`                                 // Must be greater than or equal to 0
	OwnedPrivateRepos           int32      `protobuf:"varint,20,opt,name=owned_private_repos,json=ownedPrivateRepos,proto3" json:"owned_private_repos,omitempty"`                                 // Must be greater than or equal to 0
	PrivateGists                int32      `protobuf:"varint,21,opt,name=private_gists,json=privateGists,proto3" json:"private_gists,omitempty"`                                                  // Must be greater than or equal to 0
	DiskUsage                   int32      `protobuf:"varint,22,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`                                                           // Must be greater than or equal to 0
	Collaborators               int32      `protobuf:"varint,23,opt,name=collaborators,proto3" json:"collaborators,omitempty"`                                                                    // Must be greater than or equal to 0
	BillingEmail                string     `protobuf:"bytes,24,opt,name=billing_email,json=billingEmail,proto3" json:"billing_email,omitempty"`                                                   // Must be a valid email
	Type                        string     `protobuf:"bytes,25,opt,name=type,proto3" json:"type,omitempty"`                                                                                       // No validation needed
	TwoFactorRequirementEnabled bool       `protobuf:"varint,27,opt,name=two_factor_requirement_enabled,json=twoFactorRequirementEnabled,proto3" json:"two_factor_requirement_enabled,omitempty"` // No validation needed
	IsVerified                  bool       `protobuf:"varint,28,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`                                                        // No validation needed
	HasOrganizationProjects     bool       `protobuf:"varint,29,opt,name=has_organization_projects,json=hasOrganizationProjects,proto3" json:"has_organization_projects,omitempty"`               // No validation needed
	HasRepositoryProjects       bool       `protobuf:"varint,30,opt,name=has_repository_projects,json=hasRepositoryProjects,proto3" json:"has_repository_projects,omitempty"`                     // No validation needed
	// DefaultRepoPermission can be one of: "read", "write", "admin", or "none".
	DefaultRepositoryPermission string `protobuf:"bytes,31,opt,name=default_repository_permission,json=defaultRepositoryPermission,proto3" json:"default_repository_permission,omitempty"`
	DefaultRepositorySettings   string `protobuf:"bytes,32,opt,name=default_repository_settings,json=defaultRepositorySettings,proto3" json:"default_repository_settings,omitempty"`
	// MembersCanCreateRepos default value is true.
	MembersCanCreateRepositories bool `protobuf:"varint,33,opt,name=members_can_create_repositories,json=membersCanCreateRepositories,proto3" json:"members_can_create_repositories,omitempty"` // No validation needed
	// MembersCanCreatePublicRepos, MembersCanCreatePrivateRepos, MembersCanCreateInternalRepos
	MembersCanCreatePublicRepositories   bool `protobuf:"varint,34,opt,name=members_can_create_public_repositories,json=membersCanCreatePublicRepositories,proto3" json:"members_can_create_public_repositories,omitempty"`       // No validation needed
	MembersCanCreatePrivateRepositories  bool `protobuf:"varint,35,opt,name=members_can_create_private_repositories,json=membersCanCreatePrivateRepositories,proto3" json:"members_can_create_private_repositories,omitempty"`    // No validation needed
	MembersCanCreateInternalRepositories bool `protobuf:"varint,36,opt,name=members_can_create_internal_repositories,json=membersCanCreateInternalRepositories,proto3" json:"members_can_create_internal_repositories,omitempty"` // No validation needed
	// Deprecated: Use MembersCanCreatePublicRepos, MembersCanCreatePrivateRepos, MembersCanCreateInternalRepos instead.
	MembersAllowedRepositoryCreationType string `protobuf:"bytes,37,opt,name=members_allowed_repository_creation_type,json=membersAllowedRepositoryCreationType,proto3" json:"members_allowed_repository_creation_type,omitempty"` // No validation needed
	// MembersCanCreatePages toggles whether organization members can create GitHub Pages sites.
	MembersCanCreatePages        bool `protobuf:"varint,38,opt,name=members_can_create_pages,json=membersCanCreatePages,proto3" json:"members_can_create_pages,omitempty"`                        // No validation needed
	MembersCanCreatePublicPages  bool `protobuf:"varint,39,opt,name=members_can_create_public_pages,json=membersCanCreatePublicPages,proto3" json:"members_can_create_public_pages,omitempty"`    // No validation needed
	MembersCanCreatePrivatePages bool `protobuf:"varint,40,opt,name=members_can_create_private_pages,json=membersCanCreatePrivatePages,proto3" json:"members_can_create_private_pages,omitempty"` // No validation needed
	// API URLs
	Url              string `protobuf:"bytes,41,opt,name=url,proto3" json:"url,omitempty"`                                                     // Must be a valid URL
	EventsUrl        string `protobuf:"bytes,42,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`                        // Must be a valid URL
	HooksUrl         string `protobuf:"bytes,43,opt,name=hooks_url,json=hooksUrl,proto3" json:"hooks_url,omitempty"`                           // Must be a valid URL
	IssuesUrl        string `protobuf:"bytes,44,opt,name=issues_url,json=issuesUrl,proto3" json:"issues_url,omitempty"`                        // Must be a valid URL
	MembersUrl       string `protobuf:"bytes,45,opt,name=members_url,json=membersUrl,proto3" json:"members_url,omitempty"`                     // Must be a valid URL
	PublicMembersUrl string `protobuf:"bytes,46,opt,name=public_members_url,json=publicMembersUrl,proto3" json:"public_members_url,omitempty"` // Must be a valid URL
	ReposUrl         string `protobuf:"bytes,47,opt,name=repos_url,json=reposUrl,proto3" json:"repos_url,omitempty"`                           // Must be a valid URL
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_cloud_v1_cloud_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_cloud_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_cloud_v1_cloud_proto_rawDescGZIP(), []int{3}
}

func (x *Organization) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *Organization) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organization) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Organization) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Organization) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Organization) GetBlog() string {
	if x != nil {
		return x.Blog
	}
	return ""
}

func (x *Organization) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Organization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Organization) GetTwitterUsername() string {
	if x != nil {
		return x.TwitterUsername
	}
	return ""
}

func (x *Organization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Organization) GetPublicRepos() int32 {
	if x != nil {
		return x.PublicRepos
	}
	return 0
}

func (x *Organization) GetPublicGists() int32 {
	if x != nil {
		return x.PublicGists
	}
	return 0
}

func (x *Organization) GetFollowers() int32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *Organization) GetFollowing() int32 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *Organization) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Organization) GetUpdatedAt() *Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Organization) GetTotalPrivateRepos() int32 {
	if x != nil {
		return x.TotalPrivateRepos
	}
	return 0
}

func (x *Organization) GetOwnedPrivateRepos() int32 {
	if x != nil {
		return x.OwnedPrivateRepos
	}
	return 0
}

func (x *Organization) GetPrivateGists() int32 {
	if x != nil {
		return x.PrivateGists
	}
	return 0
}

func (x *Organization) GetDiskUsage() int32 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

func (x *Organization) GetCollaborators() int32 {
	if x != nil {
		return x.Collaborators
	}
	return 0
}

func (x *Organization) GetBillingEmail() string {
	if x != nil {
		return x.BillingEmail
	}
	return ""
}

func (x *Organization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Organization) GetTwoFactorRequirementEnabled() bool {
	if x != nil {
		return x.TwoFactorRequirementEnabled
	}
	return false
}

func (x *Organization) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *Organization) GetHasOrganizationProjects() bool {
	if x != nil {
		return x.HasOrganizationProjects
	}
	return false
}

func (x *Organization) GetHasRepositoryProjects() bool {
	if x != nil {
		return x.HasRepositoryProjects
	}
	return false
}

func (x *Organization) GetDefaultRepositoryPermission() string {
	if x != nil {
		return x.DefaultRepositoryPermission
	}
	return ""
}

func (x *Organization) GetDefaultRepositorySettings() string {
	if x != nil {
		return x.DefaultRepositorySettings
	}
	return ""
}

func (x *Organization) GetMembersCanCreateRepositories() bool {
	if x != nil {
		return x.MembersCanCreateRepositories
	}
	return false
}

func (x *Organization) GetMembersCanCreatePublicRepositories() bool {
	if x != nil {
		return x.MembersCanCreatePublicRepositories
	}
	return false
}

func (x *Organization) GetMembersCanCreatePrivateRepositories() bool {
	if x != nil {
		return x.MembersCanCreatePrivateRepositories
	}
	return false
}

func (x *Organization) GetMembersCanCreateInternalRepositories() bool {
	if x != nil {
		return x.MembersCanCreateInternalRepositories
	}
	return false
}

func (x *Organization) GetMembersAllowedRepositoryCreationType() string {
	if x != nil {
		return x.MembersAllowedRepositoryCreationType
	}
	return ""
}

func (x *Organization) GetMembersCanCreatePages() bool {
	if x != nil {
		return x.MembersCanCreatePages
	}
	return false
}

func (x *Organization) GetMembersCanCreatePublicPages() bool {
	if x != nil {
		return x.MembersCanCreatePublicPages
	}
	return false
}

func (x *Organization) GetMembersCanCreatePrivatePages() bool {
	if x != nil {
		return x.MembersCanCreatePrivatePages
	}
	return false
}

func (x *Organization) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Organization) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *Organization) GetHooksUrl() string {
	if x != nil {
		return x.HooksUrl
	}
	return ""
}

func (x *Organization) GetIssuesUrl() string {
	if x != nil {
		return x.IssuesUrl
	}
	return ""
}

func (x *Organization) GetMembersUrl() string {
	if x != nil {
		return x.MembersUrl
	}
	return ""
}

func (x *Organization) GetPublicMembersUrl() string {
	if x != nil {
		return x.PublicMembersUrl
	}
	return ""
}

func (x *Organization) GetReposUrl() string {
	if x != nil {
		return x.ReposUrl
	}
	return ""
}

// Ensure Timestamp is defined correctly
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"` // Seconds since epoch
	Nanos   int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`     // Nanoseconds offset
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_cloud_v1_cloud_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_cloud_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_cloud_v1_cloud_proto_rawDescGZIP(), []int{4}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

var File_cloud_v1_cloud_proto protoreflect.FileDescriptor

var file_cloud_v1_cloud_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xa2, 0x10, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x76, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x76, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6b,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x71, 0x75, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x6b, 0x69, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x57, 0x69, 0x6b, 0x69, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x68, 0x61, 0x73, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x67, 0x69, 0x74, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x69, 0x74, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x0b, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x69, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x69, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x73, 0x74, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x77, 0x6f, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x69, 0x73, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x72, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x0f, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6c,
	0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x47, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f,
	0x77, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x1e, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x1f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x28, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x24, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x28, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x3b, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x42, 0x80, 0x01, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x32, 0x42, 0x0a, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x23, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x32, 0xa2, 0x02,
	0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x56, 0x32, 0xca,
	0x02, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x14, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_v1_cloud_proto_rawDescOnce sync.Once
	file_cloud_v1_cloud_proto_rawDescData = file_cloud_v1_cloud_proto_rawDesc
)

func file_cloud_v1_cloud_proto_rawDescGZIP() []byte {
	file_cloud_v1_cloud_proto_rawDescOnce.Do(func() {
		file_cloud_v1_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_v1_cloud_proto_rawDescData)
	})
	return file_cloud_v1_cloud_proto_rawDescData
}

var file_cloud_v1_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloud_v1_cloud_proto_goTypes = []any{
	(*Profile)(nil),      // 0: cloud.v2.Profile
	(*Repository)(nil),   // 1: cloud.v2.Repository
	(*User)(nil),         // 2: cloud.v2.User
	(*Organization)(nil), // 3: cloud.v2.Organization
	(*Timestamp)(nil),    // 4: cloud.v2.Timestamp
	nil,                  // 5: cloud.v2.Repository.PermissionsEntry
	nil,                  // 6: cloud.v2.User.PermissionsEntry
}
var file_cloud_v1_cloud_proto_depIdxs = []int32{
	2,  // 0: cloud.v2.Profile.user:type_name -> cloud.v2.User
	3,  // 1: cloud.v2.Profile.organization:type_name -> cloud.v2.Organization
	2,  // 2: cloud.v2.Repository.owner:type_name -> cloud.v2.User
	4,  // 3: cloud.v2.Repository.created_at:type_name -> cloud.v2.Timestamp
	4,  // 4: cloud.v2.Repository.pushed_at:type_name -> cloud.v2.Timestamp
	4,  // 5: cloud.v2.Repository.updated_at:type_name -> cloud.v2.Timestamp
	1,  // 6: cloud.v2.Repository.parent:type_name -> cloud.v2.Repository
	1,  // 7: cloud.v2.Repository.source:type_name -> cloud.v2.Repository
	1,  // 8: cloud.v2.Repository.template_repository:type_name -> cloud.v2.Repository
	3,  // 9: cloud.v2.Repository.organization:type_name -> cloud.v2.Organization
	5,  // 10: cloud.v2.Repository.permissions:type_name -> cloud.v2.Repository.PermissionsEntry
	4,  // 11: cloud.v2.User.created_at:type_name -> cloud.v2.Timestamp
	4,  // 12: cloud.v2.User.updated_at:type_name -> cloud.v2.Timestamp
	4,  // 13: cloud.v2.User.suspended_at:type_name -> cloud.v2.Timestamp
	6,  // 14: cloud.v2.User.permissions:type_name -> cloud.v2.User.PermissionsEntry
	4,  // 15: cloud.v2.Organization.created_at:type_name -> cloud.v2.Timestamp
	4,  // 16: cloud.v2.Organization.updated_at:type_name -> cloud.v2.Timestamp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cloud_v1_cloud_proto_init() }
func file_cloud_v1_cloud_proto_init() {
	if File_cloud_v1_cloud_proto != nil {
		return
	}
	file_cloud_v1_cloud_proto_msgTypes[0].OneofWrappers = []any{
		(*Profile_User)(nil),
		(*Profile_Organization)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_v1_cloud_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_v1_cloud_proto_goTypes,
		DependencyIndexes: file_cloud_v1_cloud_proto_depIdxs,
		MessageInfos:      file_cloud_v1_cloud_proto_msgTypes,
	}.Build()
	File_cloud_v1_cloud_proto = out.File
	file_cloud_v1_cloud_proto_rawDesc = nil
	file_cloud_v1_cloud_proto_goTypes = nil
	file_cloud_v1_cloud_proto_depIdxs = nil
}
